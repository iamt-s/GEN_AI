{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-27T11:03:57.203Z",
    "end": "2025-05-27T11:03:58.255Z",
    "duration": 1052,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7e76f3b8-ce65-4970-9377-1efd9acb989f",
      "title": "",
      "fullFile": "C:\\Users\\tejas.v.sonar\\Documents\\GEN_AI_POC\\TestScript\\update_USER.js",
      "file": "\\update_USER.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "756ae50b-c042-499a-a0b7-e230d16eeb31",
          "title": "Update User Test",
          "fullFile": "C:\\Users\\tejas.v.sonar\\Documents\\GEN_AI_POC\\TestScript\\update_USER.js",
          "file": "\\update_USER.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user successfully",
              "fullTitle": "Update User Test should update user successfully",
              "timedOut": false,
              "duration": 434,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.put(`https://reqres.in/api/users/${userId}`, {\n    name: 'John Doe',\n    job: 'Software Engineer'\n  }, {\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  expect(response.status).to.equal(200);\n} catch (error) {\n  if (error.response) {\n    console.log('Error occurred with status:', error.response.status);\n    expect(error.response.status).not.to.equal(200);\n  } else {\n    throw error;\n  }\n}",
              "err": {},
              "uuid": "8bff2812-9e0d-469c-a179-7d9da09c4d78",
              "parentUUID": "756ae50b-c042-499a-a0b7-e230d16eeb31",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle network error",
              "fullTitle": "Update User Test should handle network error",
              "timedOut": false,
              "duration": 327,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.put('https://reqres.in/api/users/invalid', {}, {\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json'\n    },\n    validateStatus: false // This should be set to false for handling 404 and other non-200 status codes\n  })\n    .catch(error => {\n      expect(error.message).to.include('Network Error');\n    });\n} catch (error) {\n  throw error;\n}",
              "err": {},
              "uuid": "20ec5090-541b-4774-a35a-23f18afdeb86",
              "parentUUID": "756ae50b-c042-499a-a0b7-e230d16eeb31",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle invalid response",
              "fullTitle": "Update User Test should handle invalid response",
              "timedOut": false,
              "duration": 283,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.put('https://reqres.in/api/users/invalid', {}, {\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json'\n    },\n    validateStatus: false // This should be set to false for handling 404 and other non-200 status codes\n  });\n  expect(response.status).not.to.equal(200);\n} catch (error) {\n  if (error.response) {\n    console.log('Error occurred with status:', error.response.status);\n    expect(error.response.status).not.to.equal(200);\n  } else {\n    throw error;\n  }\n}",
              "err": {},
              "uuid": "90702a4d-213d-427b-b3aa-6463fbd6a5b1",
              "parentUUID": "756ae50b-c042-499a-a0b7-e230d16eeb31",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8bff2812-9e0d-469c-a179-7d9da09c4d78",
            "20ec5090-541b-4774-a35a-23f18afdeb86",
            "90702a4d-213d-427b-b3aa-6463fbd6a5b1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1044,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}