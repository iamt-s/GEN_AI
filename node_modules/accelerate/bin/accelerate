#!/usr/bin/env node

'use strict'

let start = Date.now()

let Chalk = require('chalk')
let Program = require('commander')
let Accelerator = require('../lib/accelerator')
let Operation = require('../lib/operation')
let Drivers = require('../lib/drivers')
let Motions = require('../lib/motions')
const pkg = require('../package.json')

Program.version(pkg.version)

Program
.option('-t, --target [url]', 'the targeted url to accelerate')
.option('-d, --directory [path]', 'the directory holding the motions', '.')

Program
.command('ls')
.description('list all motions to be used')
.action(env =>
  Motions.discover(env.parent.directory)
  .then(motions => motions.forEach(m => console.log(m.name)))
  .catch(_handleError)
)

Program
.command('create <name>')
.description('create a new motion named <name> using the template')
.action((name, env) =>
  Motions.create(env.parent.directory, name)
  .then(() => Motions.discover(env.parent.directory))
  .then(motions => console.log(`Created ${Chalk.underline(motions[motions.length - 1].name)}`))
  .catch(_handleError)
)

Program
.command('add [n]')
.description('add n motions (default n=1)')
.action((n, env) => {
  n = n || '1'
  n = parseInt(n)
  return _getAccelerator(env.parent)
  .then(accelerator => accelerator.move(n))
  .then(_finish)
  .catch(_handleError)
})

Program
.command('sub [n]')
.description('subtract n motions (default n=1)')
.action((n, env) => {
  n = n || '1'
  n = parseInt(n)
  return _getAccelerator(env.parent)
  .then(accelerator => accelerator.move(-n))
  .then(_finish)
  .catch(_handleError)
})

let commands = [{
  command: 'goto <n>',
  description: 'go to the nth motion',
  method: 'goto'
}, {
  command: 'redo',
  description: 'subtract than add the last motion'
}, {
  command: 'up',
  description: 'add all remaining motions'
}, {
  command: 'down',
  description: 'subtract all previous motions'
}, {
  command: 'reset',
  description: 'subtract then add all previous motions'
}]

commands.forEach(_proxyAccelerator)

Program.parse(process.argv)

function _logMotion(motion, operation) {
  let operationSymbol = Operation.add === operation ? Chalk.green('++') : Chalk.red('--')
  console.log(`${operationSymbol} ${motion.name}`)
}

function _finish() {
  let finish = Date.now()
  console.log()
  console.log(`Done in ${Chalk.underline(`${(finish - start) / 1000}s`)}`)
  process.exit(0)
}

function _getAccelerator(env) {
  let driver = Drivers.get(env.target)
  return Motions.discover(env.directory)
  .then(motions => {
    let accelerator = new Accelerator(driver, motions)
    accelerator.on('motion', _logMotion)
    return accelerator
  })
}

function _proxyAccelerator(options) {
  Program
  .command(options.command)
  .description(options.description)
  .action(function () {
    let args = Array.prototype.slice.apply(arguments)
    let env = args.pop()
    args = args.map(parseInt)
    return _getAccelerator(env.parent)
    .then(accelerator => accelerator[options.method || options.command].apply(accelerator, args))
    .then(_finish)
    .catch(_handleError)
  })
}

function _handleError(error) {
  if (error) {
    console.error(error.stack)
    process.exit(1)
  }
}
